#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass abntex2
\begin_preamble
% ------------------------------------------------------------------------
% ------------------------------------------------------------------------
% abnTeX2: Modelo de Trabalho Academico (tese de doutorado, dissertacao de
% mestrado e trabalhos monograficos em geral) em conformidade com 
% ABNT NBR 14724:2011: Informacao e documentacao - Trabalhos academicos -
% Apresentacao
% ------------------------------------------------------------------------
% ------------------------------------------------------------------------

% ---
% Pacotes básicos 
% ---
\usepackage{lmodern}			% Usa a fonte Latin Modern		
\usepackage[T1]{fontenc}		% Selecao de codigos de fonte.
%\usepackage[utf8]{inputenc}	% Codificacao do documento (conversão automática dos acentos)
%\usepackage{lastpage}			% Usado pela Ficha catalográfica
\usepackage{indentfirst}		% Indenta o primeiro parágrafo de cada seção.
\usepackage{color}			% Controle das cores
\usepackage{graphicx}			% Inclusão de gráficos
\usepackage{microtype} 			% para melhorias de justificação
\RequirePackage{url}	% deve ser carregado para tratar url de forma correta e usado pelo abntex2cite
\usepackage{hyperref}
\RequirePackage{breakurl}			% trata de forma correta a quebra de url entre linhas% ---
\usepackage[brazilian,hyperpageref]{backref}	 % Paginas com as citações na bibl	
\usepackage[alf]{abntex2cite} % se for usar citações autor-ano % Citações padrão ABNT
%\usepackage[num]{abntex2cite} % se for usar citações numéricas
%---
% Informações de dados para CAPA e FOLHA DE ROSTO
% ---
%Ordem da CAPA ABNT NBR 14724:2011
%a) nome da instituição (opcional);
%b) nome do autor;
%c) título e/ou subtítulo: se houver, deve ser precedido de dois pontos;
%d) local (cidade) da instituição onde deve ser apresentado;
%e) ano de depósito (da entrega).
%Ordem da  FOLHA DE ROSTO ABNT NBR 14724:2011
%a) nome do autor;
%b) título e/ou subtítulo: se houver, deve ser precedido de dois pontos;
%c) natureza: tipo do trabalho (tese, dissertação, trabalho de conclusão de curso e outros) e objetivo (aprovação em disciplina, grau pretendido e outros); nome da instituição a que é submetido; área de concentração;
%f) nome do orientador e, se houver, do coorientador;
%f) local (cidade) da instituição onde deve ser apresentado;
%g) ano de depósito (da entrega).
% ---
\titulo{DESENVOLVIMENTO DE UM SISTEMA DE
MONITORAMENTO CAN E IMPLEMENTAÇÃO DE UM
PROTÓTIPO PARA INTERFACEAMENTO COM O
BARRAMENTO CAN }
\autor{Stefany Gouvêa Vanzeler}
\local{Manaus}
\data{2015}%\data{\today }
\orientador[Orientador]{Me. Angilberto Muniz Ferreira Sobrinho}
%\coorientador{Dr. Melequinha}
\instituicao{%
 Universidade do Estado do Amazonas
  \par
  Escola Superior de Tecnologia
  \par
  Engenharia de Controle e Automação}
\tipotrabalho{Trabalho de Conclusão de Curso}
% O preambulo deve conter o tipo do trabalho, o objetivo, 
% o nome da instituição e a área de concentração 
\preambulo{\imprimirtipotrabalho ~ submetido à Coordenação do curso de Engenharia de Controle e Automação da Universidade do Estado do Amazonas como parte dos requisítos necessários para a obtenção do grau de Engenheiro.}
% ---
% Impressão da Capa
\renewcommand{\imprimircapa}{%
  \begin{capa}%
\includegraphics[scale=0.12]{logouea}\\    
\center
      \hspace{-14cm}
       \vspace{-3.5cm} 
      \begin{SingleSpace}% 
      {\ABNTEXfontereduzida \MakeUppercase \imprimirinstituicao} \\ 
      \end{SingleSpace}%
      \vspace{2cm}  
    {\ABNTEXchapterfont\large\imprimirautor}\\
       \vspace{6.5cm}
%      \vspace*{\fill}
      {\ABNTEXchapterfont\bfseries\LARGE\imprimirtitulo}\\
      \vspace*{\fill}
      {\large\imprimirlocal}
      \par
      {\large\imprimirdata}
      \vspace*{1cm}
  \end{capa}
}
% ---
% Conteudo padrao da FOLHA DE ROSTO
\makeatletter
\renewcommand{\folhaderostocontent}{
  \begin{center}

    %\vspace*{1cm}
    {\ABNTEXchapterfont\large\imprimirautor}\\
    \vspace*{9cm}
    %\vspace*{\fill}\vspace*{\fill}
    {\ABNTEXchapterfont\bfseries\LARGE\imprimirtitulo}
    \vspace*{\fill}

    \abntex@ifnotempty{\imprimirpreambulo}{%
      \hspace{.45\textwidth}
      \begin{minipage}{.5\textwidth}
      	\SingleSpacing
         \imprimirpreambulo \par
         \vspace{18pt}
         {\small\imprimirorientadorRotulo~\imprimirorientador\par}
        \abntex@ifnotempty{\imprimircoorientador}{%
        {\small\imprimircoorientadorRotulo~\imprimircoorientador}}
       \end{minipage}%
       \vspace*{\fill}
    }%
    \vspace*{\fill}

    {\large\imprimirlocal}
    \par
    {\large\imprimirdata}
    \vspace*{1cm}

  \end{center}
}
\makeatother
%---
% Configurações de aparência do PDF final

% alterando o aspecto da cor azul
\definecolor{blue}{RGB}{41,5,195}

% informações do PDF
\makeatletter
\hypersetup{
 unicode=true,
    backref=true,
    pagebackref=true,
    bookmarks=true,         		% show bookmarks bar?
%	    pdftitle={\titulocompleto}, 
%	    pdfauthor={\nomecompletoautor},
%	    pdfsubject={\imprimirpreambulo},
%	    pdfkeywords={\palavrachaveum}{\palavrachavedois}{\palavrachavetres},
    pdfproducer={LaTeX with abnTeX2}, 	% producer of the document
%	    pdfcreator={\nomecompletoautor},
    colorlinks=false,       		% false: boxed links; true: colored links
    linkcolor=black,          	        % color of internal links
    citecolor=black,        		% color of links to bibliography
    filecolor=black,      		% color of file links
    urlcolor=black,			% color of url links
    bookmarksdepth=4,
    breaklinks=true		% deve ser usado com o pacote breakurl, sem ele não fuciona
}
\makeatother
%% --- 

%\usepackage{lscape}
\addto\captionsbrazil{
%% ajusta nomes padroes do babel
\renewcommand{\ABNTEXchapterfont}{\fontfamily{cmr}\fontseries{b}\selectfont}
\renewcommand{\ABNTEXchapterfontsize}{\Large}
}
\end_preamble
\options 12pt,oneside,a4paper,brazil
\use_default_options false
\maintain_unincluded_children false
\begin_local_layout
#% Não apague a linha abaixo. a configuração depende disto
#  \DeclareLaTeXClass[abntex2]{abntex2}
#############################################
# Definição da classe padrão abntex2
# Autor: Silvio Cesar Garcia Granja <sggranja@gmail.com>
#
# Versão: Alpha 0.1 r 1
# Última revisão em 28/02/2013
#
#
#############################################
###############################
# Parametros globais da classe
# Original ao memoir.layout
###############################
Format 35
Columns            1
Sides              2
SecNumDepth        1
TocDepth           1
DefaultStyle       Standard
PageStyle          Headings
Provides makeidx   1
Provides framed    1
Provides subscript 1
# Memoir has support for line spacing, but uses different names from
# what setspace.sty does.
Provides SetSpace  1
ClassOptions
FontSize             9|10|11|12|14|17
PageStyle            empty|plain|headings|myheadings|ruled|Ruled|companion
Other                oldfontcommands
End
DefaultFont
Family		Roman
Series		Medium
Shape			Up
Size			Normal
Color			None
EndFont
Style Standard
Margin                Static
LatexType             Paragraph
LatexName             dummy
ParIndent             MM
ParSkip               0.4
Align                 Block
AlignPossible         Block, Left, Right, Center
LabelType             No_Label
End
#####################################
# Elementos comuns a layouts do LyX
#####################################
Input stdclass.inc
Input numreport.inc
NoStyle Title
NoStyle Date
NoStyle Author
NoStyle Address
NoStyle Right_Address
####################################
# Espacamentos
####################################
Style Espaco_Simples
Category	ABNTEspacos
LatexType	Environment
LatexName	SingleSpace
Spacing		single
ParSkip		1
ParSep		1.2
BottomSep	1.3
End
Style Espaco_1_1/2
Category	ABNTEspacos
LatexType	Environment
LatexName	OnehalfSpace
Spacing		onehalf
ParSkip		1.35
ParSep		1.2
BottomSep	1.3
End
Style Espaco_Duplo
Category	ABNTEspacos
LatexType	Environment
LatexName	DoubleSpace
Spacing		double
ParSkip		1.7
ParSep		1.2
BottomSep	1.3
End
#########################################
# Citacoes
#########################################
Style Citacao
Category	ABNTCitacao
LatexType	Environment
LatexName	citacao
#	LeftMargin	MMMMMMMMMMMMMMM
Align		Right
AlignPossible	Block, Right
BottomSep	2
TopSep		2
Font
Size	Small
EndFont
End
###################################################
# Comandos pré-textuais
###################################################
Style Titulo
Category	ABNTPreTextual
LatexType	Command
LatexName	titulo
Margin		Dynamic
Font
Series	Bold
Size	Large
EndFont
Align		Center
AlignPossible	Center
BottomSep	1.4
End
Style Autor
Category	ABNTPreTextual
LatexType	Command
LatexName	autor
Margin		Static
Font
Series	Bold
# Color	Blue
EndFont
Align		Left
AlignPossible	Left
BottomSep	1.4
LabelType	Top_Environment
LabelString	"Autor :"
End
Style Orientador
Category	ABNTPreTextual
LatexType	Command
LatexName	orientador
Margin		Static
Font
Series	Bold
EndFont
Align		Left
AlignPossible	Left
BottomSep	1.4
LabelType	Top_Environment
LabelString	"Orientador :"
LabelBottomSep   0.3
LabelFont
Series	Bold
EndFont
End
Style Orientadora
Category	ABNTPreTextual
CopyStyle	Orientador
LatexParam	[Orientadora]
LabelString	"Orientadora :"
End
Style Orientadores
Category	ABNTPreTextual
CopyStyle	Orientador
LatexParam	[Orientadores]
LabelString	"Orientadores :"
End
Style Co-Orientador
Category	ABNTPreTextual
CopyStyle	Orientador
LatexName	coorientador
LabelString	"Co-orientador :"
End
Style Co-Orientadora
Category	ABNTPreTextual
CopyStyle	Co-Orientador
LatexParam	[Co-Orientadora]
LabelString	"Co-orientadora :"
End
Style Co-Orientadores
Category	ABNTPreTextual
CopyStyle	Co-Orientador
LatexParam	[Co-Orientadores]
LabelString	"Co-orientadores :"
End
Style Tipo-trabalho
Category	ABNTPreTextual
CopyStyle	Co-Orientador
LatexName	tipotrabalho
LabelString	"Tipo de Trabalho :"
End
Style Preambulo
Category	ABNTPreTextual
LatexType	Command
LatexName	preambulo
Margin		Dynamic
LeftMargin	MMM
RightMargin	MMM
#Align		Block
#AlignPossible	Block
Align		Right
AlignPossible	RightLeft
BottomSep	1.4
LabelString	"Preambulo :"
LabelType	Centered_Top_Environment
Font
Size	Small
#Color	Red
EndFont
End
Style Instituicao
Category	ABNTPreTextual
LatexType	Command
LatexName	instituicao
Align		Left
AlignPossible	Left
Font
Series	Bold
EndFont
BottomSep	1.4
LabelString	"Instituicao :"
LabelType	Top_Environment
End
Style Local
Category	ABNTPreTextual
LatexType	Command
LatexName	local
Align		Center
AlignPossible	Center
Font
Series	Bold
EndFont
BottomSep	1.4
LabelString	"Local :"
LabelType	Top_Environment
End
Style Data
Category	ABNTPreTextual
LatexType	Command
LatexName	data
Align		Center
AlignPossible	Center
Font
Series	Bold
EndFont
BottomSep	1.4
LabelString	"Data :"
LabelType	Top_Environment
End
Style Folha_de_Aprovacao
Category	ABNTPreTextual
LatexType	Environment
LatexName	folhadeaprovacao
End
Style Assinatura
Category	ABNTPreTextual
LatexType	Command
LatexName	assinatura*
Margin		Static
Align		Center
AlignPossible	Left, Center
LabelFont
Series	Bold
EndFont
LabelString	"Assinatura : "
LabelType	Static
End
Style Capitulo_Pre-Textual
Category	ABNTPreTextual
Margin		Dynamic
LatexType	Command
LatexName	pretextualchapter
NeedProtect	1
NextNoIndent	0
LabelSep	xxx
ParSkip		0.4
TopSep		1.3
BottomSep	0.7
ParSep		0.7
Align		Block
AlignPossible	Block, Left
LabelType	Static
LabelString	"Pré-textual capítulo: "
LabelFont
Series	Bold
EndFont
End
#####################################################
# Resumo e Abstract
#####################################################
Style Resumo
CopyStyle	Abstract
LabelString	"Resumo"
LatexName	"resumo"
End
#####################################################
# Alineas, Subalineas, Incisos, siglas, simbolos
#####################################################
Style Alineas
CopyStyle	Enumerate
LabelString	"alineas"
LatexName	"alineas"
End
Style Subalineas
CopyStyle	Enumerate
LabelString	"subalineas"
LatexName	"subalineas"
End
Style Incisos
CopyStyle	Enumerate
LabelString	"incisos"
LatexName	"incisos"
End
Style Siglas
CopyStyle	Itemize
LabelString	"siglas"
LatexName	"siglas"
End
Style Simbolos
CopyStyle	Itemize
LabelString	"simbolos"
LatexName	"simbolos"
End
\end_local_layout
\language brazilian
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 2
\tocdepth 2
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

% Retira espaço extra obsoleto entre as frases.
\end_layout

\begin_layout Plain Layout


\backslash
frenchspacing 
\end_layout

\begin_layout Plain Layout

% ----------------------------------------------------------
\end_layout

\begin_layout Plain Layout

% ELEMENTOS PRÉ-TEXTUAIS
\end_layout

\begin_layout Plain Layout

% ----------------------------------------------------------
\end_layout

\begin_layout Plain Layout


\backslash
pretextual
\end_layout

\begin_layout Plain Layout

% --- 
\end_layout

\begin_layout Plain Layout

% Capa
\end_layout

\begin_layout Plain Layout

% ---
\end_layout

\begin_layout Plain Layout


\backslash
imprimircapa
\end_layout

\begin_layout Plain Layout

% ---
\end_layout

\begin_layout Plain Layout

% Folha de rosto
\end_layout

\begin_layout Plain Layout

% (o * indica que haverá a ficha bibliográfica)
\end_layout

\begin_layout Plain Layout

% ---
\end_layout

\begin_layout Plain Layout


\backslash
imprimirfolhaderosto%*
\end_layout

\begin_layout Plain Layout

% ---
\end_layout

\begin_layout Plain Layout

% --- % Inserir a ficha bibliografica % ---
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{folhadeaprovacao}
\end_layout

\begin_layout Plain Layout

  
\backslash
begin{center}
\end_layout

\begin_layout Plain Layout

     {
\backslash
ABNTEXchapterfont
\backslash
large
\backslash
imprimirautor}
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

        
\backslash
vspace*{
\backslash
fill}
\backslash
vspace*{
\backslash
fill}
\end_layout

\begin_layout Plain Layout

     {
\backslash
ABNTEXchapterfont
\backslash
bfseries
\backslash
Large
\backslash
imprimirtitulo}
\end_layout

\begin_layout Plain Layout

        
\backslash
vspace*{
\backslash
fill}
\end_layout

\begin_layout Plain Layout

        
\backslash
hspace{.45
\backslash
textwidth}
\end_layout

\begin_layout Plain Layout

  
\backslash
end{center}
\end_layout

\begin_layout Plain Layout

     
\backslash
begin{flushright}
\end_layout

\begin_layout Plain Layout

        
\backslash
begin{minipage}{.5
\backslash
textwidth}
\end_layout

\begin_layout Plain Layout

           
\backslash
imprimirpreambulo
\end_layout

\begin_layout Plain Layout

        
\backslash
end{minipage}%
\end_layout

\begin_layout Plain Layout

     
\backslash
end{flushright}
\end_layout

\begin_layout Plain Layout

     
\backslash
vspace*{
\backslash
fill}
\end_layout

\begin_layout Plain Layout

  
\backslash
begin{center}   
\end_layout

\begin_layout Plain Layout

     Aprovado em 28 de novembro  de 2015.
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

     
\backslash
vspace*{
\backslash
fill}
\end_layout

\begin_layout Plain Layout

     
\backslash
MakeUppercase{Banca Examinadora}
\end_layout

\begin_layout Plain Layout

  
\backslash
end{center}
\end_layout

\begin_layout Plain Layout

  
\backslash
assinatura{
\backslash
textbf{
\backslash
imprimirorientador}
\backslash

\backslash
 Orientador}
\end_layout

\begin_layout Plain Layout

  
\backslash
assinatura{
\backslash
textbf{Dr.
 Walter Andrés Vermehren Valenzuela} 
\backslash

\backslash
 Presidente da Banca}
\end_layout

\begin_layout Plain Layout

  
\backslash
assinatura{
\backslash
textbf{Me.
 Moisés Bastos} 
\backslash

\backslash
 Convidado 2}
\end_layout

\begin_layout Plain Layout

   
\backslash
assinatura{
\backslash
textbf{Dr.
 Daniel Guzman} 
\backslash

\backslash
 Convidado 3}
\end_layout

\begin_layout Plain Layout

  %% 
\backslash
assinatura{
\backslash
textbf{Professor} 
\backslash

\backslash
 Convidado 4}
\end_layout

\begin_layout Plain Layout

  
\backslash
begin{center} 
\end_layout

\begin_layout Plain Layout

     
\backslash
vspace*{0.5cm}
\end_layout

\begin_layout Plain Layout

     {
\backslash
large
\backslash
imprimirlocal}
\end_layout

\begin_layout Plain Layout

     
\backslash
par 
\end_layout

\begin_layout Plain Layout

     {
\backslash
large
\backslash
imprimirdata}
\end_layout

\begin_layout Plain Layout

     
\backslash
vspace*{1cm} 
\end_layout

\begin_layout Plain Layout

  
\backslash
end{center} 
\end_layout

\begin_layout Plain Layout


\backslash
end{folhadeaprovacao}
\end_layout

\begin_layout Plain Layout

% ---
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

% ---
\end_layout

\begin_layout Plain Layout

% Agradecimentos
\end_layout

\begin_layout Plain Layout

% ---
\end_layout

\begin_layout Plain Layout


\backslash
begin{agradecimentos}
\end_layout

\begin_layout Plain Layout

Primeiro gostaria de agradecer a Deus, por ter me abençoado e me dado discernime
nto nesses anos de faculdade.
 
\end_layout

\begin_layout Plain Layout


\backslash
par Um agradecimento especial aos meus pais, Terezinha e Geraldo, pela educação
 que me deram e por sempre me apoiarem.
 
\end_layout

\begin_layout Plain Layout


\backslash
par Um segundo agradecimento especial à família Rauscher, família Souza
 e família TWRMN, que me apoiaram nos meus estudos.
 
\end_layout

\begin_layout Plain Layout


\backslash
par Agradeço também à Universidade do Estado do Amazonas e sua equipe administra
tiva, à coordenação de Engenharia de Controle e Automação e todos os seus
 professores, nos quais muitos se tornaram verdadeiros amigos nessa jornada.
 Agradeço especialmente ao meu orientador, Msc.
 Angilberto Muniz Ferreira Sobrinho por toda paciencia e dedicação.
\end_layout

\begin_layout Plain Layout


\backslash
par Por fim, e de maneira muito significativa, agradeço aos amigos que criei
 nessa jornada, e que levarei pra vida inteira: Anderson, Cristiano, Luiz,
 Luanda, Patrick e Nayana.
  
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
end{agradecimentos}
\end_layout

\begin_layout Plain Layout

% ---
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

% resumo em português
\end_layout

\begin_layout Plain Layout


\backslash
begin{resumo}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
O presente trabalho tem como objetivos o desenvolvimento de um sistema de
 monitoramento de barramento CAN, aonde possa-se observar o fluxo de dados
 entre as ECUs (unidades eletrônicas de controle) e a implementação de um
 protótipo, que funcione como um 
\shape italic
gateway
\shape default
 entre os protocolos TCP/IP e CAN.
 A 
\shape italic
gateway
\shape default
 é desenvolvida em um sistema 
\shape italic
Linux
\shape default
 embarcado com arquitetura ARM de baixo custo e é responsável pela interface
 entre o barramento CAN e o sistema de
\shape italic
 
\shape default
monitoramento projetado, o qual opera em um computador pessoal 
\shape italic
Windows
\shape default
.

\shape italic
 
\shape default
O sistema desenvolvido serve como modelo para integração futura de dispositivos
 de campo com uma rede 
\shape italic
DeviceNet
\shape default
 no laboratório de automação industrial da EST (Escola Superior de Tecnologia).
 Uma revisão bibliográfica conferindo embasamento teórico para realização
 do trabalho foi feita.
 Uma comparação entre os minicomputadores
\shape italic
 Raspberry PI B+
\shape default
 e 
\shape italic
Beaglebone Black
\shape default
 foi realizada, definindo-se critérios para a escolha de um deles para a
 implementação do protótipo.
 O modelo e arquitetura do sistema foram definidos de acordo com os requisitos
 do projeto, servindo como base para o desenvolvimento dos módulos de software
 e hardware.
 Uma rede CAN com duas ECUs (uma com o 
\shape italic
Beaglebone Black
\shape default
 e outra com o 
\shape italic
Funduino UNO
\shape default
) foi construída para testes e validação do funcionamento do sistema de
 monitoramento e do protótipo.
 Após validação um manual do usuário foi criado explicando o funcionamento
 do sistema desenvolvido.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
vspace{
\backslash
onelineskip}
\end_layout

\begin_layout Plain Layout

      
\backslash
noindent  
\backslash
textbf{Palavras-chaves}: Controller Area Network.
 TCP/IP.
 Gateway.
 Monitoramento.
\end_layout

\begin_layout Plain Layout


\backslash
end{resumo}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

% resumo em inglês
\end_layout

\begin_layout Plain Layout


\backslash
begin{resumo}[Abstract]
\end_layout

\begin_layout Plain Layout

 
\backslash
begin{otherlanguage*}{english}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
This bachelor thesis aims to develop a CAN bus monitoring system, in which
 we can observe the flow of data among the ECUs (electronic control units)
 and to implement a prototype that works as a gateway between the TCP/IP
 and CAN protocols.
 The gateway is developed in a low-cost Linux-ARM based platform and is
 responsible for interfacing between the CAN bus and the monitoring system
 designed.
 The developed system is as model for the future integration of field devices
 to the DeviceNet network located at the industrial automation laboratory
 at EST (Amazonas State Technology School).
 A literature revision and a comparison between the Raspberry PI B + and
 Beaglebone Black minicomputers were done, defining criteria for choosing
 one of them to implement the prototype.
 The model and system architecture were defined according to the project
 requirements and used for the implementation of the software and hardware
 modules.
 A CAN network with two ECUs (one with Beaglebone Black and another with
 Funduino UNO) was built for tests and validation of the monitoring system
 and the prototype.
 After validation, a user's manual was created explaining the operation
 of the developed system.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
vspace{
\backslash
onelineskip}
\end_layout

\begin_layout Plain Layout

 
\backslash
noindent 
\end_layout

\begin_layout Plain Layout


\backslash
textbf{Key-words}:Controller Area Network.
 TCP/IP.
 Gateway.
 Monitoring System.
\end_layout

\begin_layout Plain Layout


\backslash
end{otherlanguage*}
\end_layout

\begin_layout Plain Layout


\backslash
end{resumo}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Comment
status collapsed

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

% inserir lista de ilustrações
\end_layout

\begin_layout Plain Layout

% ---
\end_layout

\begin_layout Plain Layout


\backslash
pdfbookmark[0]{
\backslash
listfigurename}{lof}
\end_layout

\begin_layout Plain Layout


\backslash
listoffigures*
\end_layout

\begin_layout Plain Layout


\backslash
cleardoublepage
\end_layout

\begin_layout Plain Layout

% ---
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage cleardoublepage
\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
pdfbookmark[0]{
\backslash
listfigurename}{lof}
\end_layout

\begin_layout Plain Layout


\backslash
listoffigures*
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage cleardoublepage
\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
pdfbookmark[0]{
\backslash
listtablename}{lot} 
\end_layout

\begin_layout Plain Layout


\backslash
listoftables*
\end_layout

\end_inset


\begin_inset Newpage cleardoublepage
\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
pdfbookmark[0]{
\backslash
contentsname}{toc} 
\end_layout

\begin_layout Plain Layout


\backslash
tableofcontents*
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage cleardoublepage
\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

% ELEMENTOS TEXTUAIS
\end_layout

\begin_layout Plain Layout

% ----------------------------------------------------------
\end_layout

\begin_layout Plain Layout


\backslash
textual
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand include
filename "introduc.lyx"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand include
filename "cap1_referencial_teorico.lyx"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand include
filename "cap2_desenvolvimento.lyx"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand include
filename "cap3_resultados obtidos.lyx"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand include
filename "Conclus_tese.lyx"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset bibtex
LatexCommand bibtex
bibfiles "bibliografia_stefany"
options "abntex2-alf"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
% Apêndices 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{apendicesenv} % Inicia os apêndices
\end_layout

\end_inset


\end_layout

\begin_layout Chapter
\begin_inset CommandInset label
LatexCommand label
name "chap:Algoritmo-implementado-no-arduino"

\end_inset

Algoritmo implementado no Funduino Uno (TesteStatus)
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

#include <mcp_can.h> 
\end_layout

\begin_layout Plain Layout

#include <SPI.h>   
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

//botao
\end_layout

\begin_layout Plain Layout

int botao=4;
\end_layout

\begin_layout Plain Layout

int botaostatus=0;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

//leds 
\end_layout

\begin_layout Plain Layout

int LEDAzul=8; 
\end_layout

\begin_layout Plain Layout

int LEDVermelho=2; 
\end_layout

\begin_layout Plain Layout

int LEDVerde=3; 
\end_layout

\begin_layout Plain Layout

int LedAzulStatus =0; 
\end_layout

\begin_layout Plain Layout

int LedVermelhoStatus =0; 
\end_layout

\begin_layout Plain Layout

int LedVerdeStatus =0;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

//sensor ultrassonico 
\end_layout

\begin_layout Plain Layout

int trigger=7; 
\end_layout

\begin_layout Plain Layout

int echo=6; 
\end_layout

\begin_layout Plain Layout

long duracao=0; 
\end_layout

\begin_layout Plain Layout

long distancia=0;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

//sensor de luminosidade 
\end_layout

\begin_layout Plain Layout

int entrada= A2; 
\end_layout

\begin_layout Plain Layout

int sensorValor = 0;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// buzina 
\end_layout

\begin_layout Plain Layout

int Pieps=5; 
\end_layout

\begin_layout Plain Layout

int PiepsStatus = 0;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// sensor de temperatura 
\end_layout

\begin_layout Plain Layout

int TMP36 = A1;  
\end_layout

\begin_layout Plain Layout

int temperatura = 0; 
\end_layout

\begin_layout Plain Layout

int temp[10]; 
\end_layout

\begin_layout Plain Layout

int time= 20; 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void setup() 
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

   Serial.begin(115200);
\end_layout

\begin_layout Plain Layout

         
\end_layout

\begin_layout Plain Layout

// inicia o can bus, com baudrate: 500k   
\end_layout

\begin_layout Plain Layout

if(CAN.begin(CAN_500KBPS) ==CAN_OK)    {
\end_layout

\begin_layout Plain Layout

Serial.print("Can init ok!!
\backslash
r
\backslash
n");
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

pinMode(botao, INPUT);    
\end_layout

\begin_layout Plain Layout

pinMode(LEDAzul, OUTPUT);    
\end_layout

\begin_layout Plain Layout

pinMode(LEDVermelho, OUTPUT);    
\end_layout

\begin_layout Plain Layout

pinMode(LEDVerde, OUTPUT);    
\end_layout

\begin_layout Plain Layout

pinMode(trigger, OUTPUT); 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

//sensor ultrassonico    
\end_layout

\begin_layout Plain Layout

pinMode(echo, INPUT); 
\end_layout

\begin_layout Plain Layout

pinMode(Pieps,OUTPUT);    
\end_layout

\begin_layout Plain Layout

}   
\end_layout

\begin_layout Plain Layout

else Serial.print("Can init fail!!
\backslash
r
\backslash
n"); 
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

void temperatura() 
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

temp[0] = map(analogRead(TMP36), 0, 410, -50, 150);
\end_layout

\begin_layout Plain Layout

delay(time);
\end_layout

\begin_layout Plain Layout

temp[1] = map(analogRead(TMP36), 0, 410, -50, 150); 
\end_layout

\begin_layout Plain Layout

delay(time); 
\end_layout

\begin_layout Plain Layout

temp[2] = map(analogRead(TMP36), 0, 410, -50, 150); 
\end_layout

\begin_layout Plain Layout

delay(time);
\end_layout

\begin_layout Plain Layout

temp[3] = map(analogRead(TMP36), 0, 410, -50, 150);
\end_layout

\begin_layout Plain Layout

delay(time);
\end_layout

\begin_layout Plain Layout

temp[4] = map(analogRead(TMP36), 0, 410, -50, 150);
\end_layout

\begin_layout Plain Layout

delay(time);
\end_layout

\begin_layout Plain Layout

temp[5] = map(analogRead(TMP36), 0, 410, -50, 150);
\end_layout

\begin_layout Plain Layout

delay(time);
\end_layout

\begin_layout Plain Layout

temp[6] = map(analogRead(TMP36), 0, 410, -50, 150);
\end_layout

\begin_layout Plain Layout

delay(time);
\end_layout

\begin_layout Plain Layout

temp[7] = map(analogRead(TMP36), 0, 410, -50, 150);
\end_layout

\begin_layout Plain Layout

delay(time);
\end_layout

\begin_layout Plain Layout

temp[8] = map(analogRead(TMP36), 0, 410, -50, 150);
\end_layout

\begin_layout Plain Layout

delay(time);
\end_layout

\begin_layout Plain Layout

temp[9] = map(analogRead(TMP36), 0, 410, -50, 150);
\end_layout

\begin_layout Plain Layout

temperatura=(temp[0]+temp[1]+temp[2]+temp[3]+temp[4]+temp[5] +temp[6]+temp[7]+te
mp[8]+temp[9])/10; // Alles in eine Zeile! 
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

void distancia() 
\end_layout

\begin_layout Plain Layout

{  
\end_layout

\begin_layout Plain Layout

// medicao de distancia com o sensor ultrassonico
\end_layout

\begin_layout Plain Layout

digitalWrite(trigger, LOW);
\end_layout

\begin_layout Plain Layout

delay(5);
\end_layout

\begin_layout Plain Layout

digitalWrite(trigger, HIGH);   
\end_layout

\begin_layout Plain Layout

delay(10);   
\end_layout

\begin_layout Plain Layout

digitalWrite(trigger, LOW);   
\end_layout

\begin_layout Plain Layout

duracao = pulseIn(echo, HIGH);   
\end_layout

\begin_layout Plain Layout

distancia = (duracao/2) / 29.1; 
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

void loop() 
\end_layout

\begin_layout Plain Layout

{   
\end_layout

\begin_layout Plain Layout

// configuracao de recepcao de mensagens   
\end_layout

\begin_layout Plain Layout

byte nMsgLen = 0;   
\end_layout

\begin_layout Plain Layout

byte nMsgBuffer[8];   
\end_layout

\begin_layout Plain Layout

unsigned char buf[8];   
\end_layout

\begin_layout Plain Layout

char sString[4];   
\end_layout

\begin_layout Plain Layout

unsigned char Dta[8]; 
\end_layout

\begin_layout Plain Layout

if(CAN.checkReceive() == CAN_MSGAVAIL) 
\end_layout

\begin_layout Plain Layout

{ 
\end_layout

\begin_layout Plain Layout

// ler o buffer de messagens  
\end_layout

\begin_layout Plain Layout

CAN.readMsgBuf(&nMsgLen, &nMsgBuffer[0]); 
\end_layout

\begin_layout Plain Layout

INT32U nMsgID = CAN.getCanId();
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// Imprime o ID da messagem ID no monitor serial
\end_layout

\begin_layout Plain Layout

Serial.print("Message ID: 0x");
\end_layout

\begin_layout Plain Layout

if (nMsgID == 0x02) 
\end_layout

\begin_layout Plain Layout

{    
\end_layout

\begin_layout Plain Layout

unsigned char a[nMsgLen]; 
\end_layout

\begin_layout Plain Layout

for (int i = 0; i < nMsgLen; i++) 
\end_layout

\begin_layout Plain Layout

{     
\end_layout

\begin_layout Plain Layout

for (int nIndex = 0; nIndex < nMsgLen; nIndex++)     
\end_layout

\begin_layout Plain Layout

{      
\end_layout

\begin_layout Plain Layout

a[i] = *(&nMsgBuffer[0]+i);      
\end_layout

\begin_layout Plain Layout

}// end for 2 
\end_layout

\begin_layout Plain Layout

}// end for1
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

//se distancia > 0x38  
\end_layout

\begin_layout Plain Layout

if (a[0] == 0x01)   
\end_layout

\begin_layout Plain Layout

{    
\end_layout

\begin_layout Plain Layout

digitalWrite(Pieps, HIGH); // buzina liga    
\end_layout

\begin_layout Plain Layout

//delay(1);   
\end_layout

\begin_layout Plain Layout

}   
\end_layout

\begin_layout Plain Layout

else if (a[0] == 0x00)   
\end_layout

\begin_layout Plain Layout

{     
\end_layout

\begin_layout Plain Layout

digitalWrite(Pieps, LOW);   
\end_layout

\begin_layout Plain Layout

}   
\end_layout

\begin_layout Plain Layout

// se temperatura > 0x2A,   
\end_layout

\begin_layout Plain Layout

if (a[1] == 0x01)   
\end_layout

\begin_layout Plain Layout

{   
\end_layout

\begin_layout Plain Layout

digitalWrite(LEDVermelho, HIGH); //led vermelho acende   
\end_layout

\begin_layout Plain Layout

//delay(1000);    
\end_layout

\begin_layout Plain Layout

}   
\end_layout

\begin_layout Plain Layout

else if (a[1] == 0x00)   
\end_layout

\begin_layout Plain Layout

{      
\end_layout

\begin_layout Plain Layout

digitalWrite(LEDVermelho, LOW);    
\end_layout

\begin_layout Plain Layout

}    
\end_layout

\begin_layout Plain Layout

// se luminosidade > 0xD5    
\end_layout

\begin_layout Plain Layout

if (a[2] == 0x01)    
\end_layout

\begin_layout Plain Layout

{      
\end_layout

\begin_layout Plain Layout

digitalWrite(LEDVerde, HIGH); //led verde acende    
\end_layout

\begin_layout Plain Layout

}    
\end_layout

\begin_layout Plain Layout

else if (a[2] == 0x00)    
\end_layout

\begin_layout Plain Layout

{      
\end_layout

\begin_layout Plain Layout

digitalWrite(LEDVerde, LOW);    
\end_layout

\begin_layout Plain Layout

}    
\end_layout

\begin_layout Plain Layout

// botao = 1 (apertado)    
\end_layout

\begin_layout Plain Layout

if (a[3] == 0x01)    
\end_layout

\begin_layout Plain Layout

{      
\end_layout

\begin_layout Plain Layout

digitalWrite(LEDAzul, HIGH); // led azul acende    
\end_layout

\begin_layout Plain Layout

//  delay(1000);     
\end_layout

\begin_layout Plain Layout

}     
\end_layout

\begin_layout Plain Layout

else if (a[3] == 0x00)     
\end_layout

\begin_layout Plain Layout

{       
\end_layout

\begin_layout Plain Layout

digitalWrite(LEDAzul, LOW);     
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

} // end if (nMsgID == 0x02)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// imprimir mensagem no serial monitor do funduino 
\end_layout

\begin_layout Plain Layout

if(nMsgID < 16) Serial.print("0");
\end_layout

\begin_layout Plain Layout

Serial.print(itoa(nMsgID, sString, 16));
\end_layout

\begin_layout Plain Layout

Serial.print("
\backslash
n
\backslash
r"); 
\end_layout

\begin_layout Plain Layout

// imprimir dados no monitor serial do funduino 
\end_layout

\begin_layout Plain Layout

Serial.print("Data: "); 
\end_layout

\begin_layout Plain Layout

for(int nIndex = 0; nIndex < nMsgLen; nIndex++) 
\end_layout

\begin_layout Plain Layout

{ 
\end_layout

\begin_layout Plain Layout

Serial.print("0x"); 
\end_layout

\begin_layout Plain Layout

if(nMsgBuffer[nIndex] < 16) 
\end_layout

\begin_layout Plain Layout

Serial.print("0"); 
\end_layout

\begin_layout Plain Layout

Serial.print(itoa(nMsgBuffer[nIndex], sString, 16)); 
\end_layout

\begin_layout Plain Layout

Serial.print(" ");  
\end_layout

\begin_layout Plain Layout

}// end for 
\end_layout

\begin_layout Plain Layout

Serial.print("
\backslash
n
\backslash
r
\backslash
n
\backslash
r"); 
\end_layout

\begin_layout Plain Layout

}// end if
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// check de status    
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// status do botao   
\end_layout

\begin_layout Plain Layout

botaostatus=digitalRead(taster);      
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

//distancia   
\end_layout

\begin_layout Plain Layout

distancia();
\end_layout

\begin_layout Plain Layout

       
\end_layout

\begin_layout Plain Layout

// sensor de luminosidade   
\end_layout

\begin_layout Plain Layout

sensorValor =analogRead(entrada);
\end_layout

\begin_layout Plain Layout

     
\end_layout

\begin_layout Plain Layout

// temperatura
\end_layout

\begin_layout Plain Layout

temperatura(); 
\end_layout

\begin_layout Plain Layout

     
\end_layout

\begin_layout Plain Layout

// Envio de mensagens        
\end_layout

\begin_layout Plain Layout

unsigned char stmp_mensagem[4] = {distancia, temperatura, 
\end_layout

\begin_layout Plain Layout

sensorValor,botaostatus};   
\end_layout

\begin_layout Plain Layout

CAN.sendMsgBuf(0x01, 0, 4, stmp_mensagem); // id padrao   
\end_layout

\begin_layout Plain Layout

//CAN.sendMsgBuf(0x00, CAN_EXTID, 8, stmp);  id padrao extendido   
\end_layout

\begin_layout Plain Layout

delay(300);  
\end_layout

\begin_layout Plain Layout

}// fim
\end_layout

\end_inset


\end_layout

\begin_layout Chapter
Algoritmo implementado no Protótipo (Teste)
\shape italic

\begin_inset CommandInset label
LatexCommand label
name "chap:Algorítmo-implementado-no-matlab"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

#include <stdio.h> 
\end_layout

\begin_layout Plain Layout

#include <stdlib.h> 
\end_layout

\begin_layout Plain Layout

#include <unistd.h> 
\end_layout

\begin_layout Plain Layout

#include <string.h>
\end_layout

\begin_layout Plain Layout

#include <net/if.h> 
\end_layout

\begin_layout Plain Layout

#include <sys/types.h> 
\end_layout

\begin_layout Plain Layout

#include <sys/socket.h> 
\end_layout

\begin_layout Plain Layout

#include <sys/ioctl.h>
\end_layout

\begin_layout Plain Layout

#include <linux/can.h> 
\end_layout

\begin_layout Plain Layout

#include <linux/can/raw.h>
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

int main(void) 
\end_layout

\begin_layout Plain Layout

{ 	
\end_layout

\begin_layout Plain Layout

int s; 	
\end_layout

\begin_layout Plain Layout

int nbytes; 	
\end_layout

\begin_layout Plain Layout

struct sockaddr_can addr; 
\end_layout

\begin_layout Plain Layout

struct can_frame frameReceive; 	
\end_layout

\begin_layout Plain Layout

struct can_frame frameSend; 	
\end_layout

\begin_layout Plain Layout

struct ifreq ifr; 	
\end_layout

\begin_layout Plain Layout

int PiepsStatus = 0x00; // buzina	
\end_layout

\begin_layout Plain Layout

int LedVermelhoStatus = 0x00; 	
\end_layout

\begin_layout Plain Layout

int LedVerdeStatus = 0x00; 	
\end_layout

\begin_layout Plain Layout

int LedAzulStatus = 0x00;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

char *ifname = "can0";
\end_layout

\begin_layout Plain Layout

	if((s = socket(PF_CAN, SOCK_RAW, CAN_RAW)) < 0) 
\end_layout

\begin_layout Plain Layout

{ 		
\end_layout

\begin_layout Plain Layout

perror("Error while opening socket"); 		
\end_layout

\begin_layout Plain Layout

return -1; 	
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

strcpy(ifr.ifr_name, ifname); 	
\end_layout

\begin_layout Plain Layout

ioctl(s, SIOCGIFINDEX, &ifr); 
\end_layout

\begin_layout Plain Layout

addr.can_family  = AF_CAN;
\end_layout

\begin_layout Plain Layout

addr.can_ifindex = ifr.ifr_ifindex; 
\end_layout

\begin_layout Plain Layout

printf("%s at index %d
\backslash
n", ifname, ifr.ifr_ifindex);
\end_layout

\begin_layout Plain Layout

if(bind(s, (struct sockaddr *)&addr, sizeof(addr)) < 0) 
\end_layout

\begin_layout Plain Layout

{ 		
\end_layout

\begin_layout Plain Layout

perror("Error in socket bind"); 		
\end_layout

\begin_layout Plain Layout

return -2; 	
\end_layout

\begin_layout Plain Layout

} 
\end_layout

\begin_layout Plain Layout

for (;;) 	
\end_layout

\begin_layout Plain Layout

{ 	/*recepcao de frames CAN */ 
\end_layout

\begin_layout Plain Layout

nbytes = read(s, &frameReceive, sizeof(struct can_frame));
\end_layout

\begin_layout Plain Layout

if (nbytes < 0) 
\end_layout

\begin_layout Plain Layout

{             
\end_layout

\begin_layout Plain Layout

perror("can raw socket read");
\end_layout

\begin_layout Plain Layout

return 1;     
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

/*  check recepcao...
 */     
\end_layout

\begin_layout Plain Layout

if (nbytes < sizeof(struct can_frame)) 
\end_layout

\begin_layout Plain Layout

{             
\end_layout

\begin_layout Plain Layout

fprintf(stderr, "read: incomplete CAN frame
\backslash
n");             
\end_layout

\begin_layout Plain Layout

return 1;     
\end_layout

\begin_layout Plain Layout

} 	
\end_layout

\begin_layout Plain Layout

if (frameReceive.can_id == 0x01) 	
\end_layout

\begin_layout Plain Layout

{ /*  {distancia, temperatura, sensorValor,botaostatus}*/ 	
\end_layout

\begin_layout Plain Layout

if (frameReceive.data[0] > 0x38) 	
\end_layout

\begin_layout Plain Layout

{ 	
\end_layout

\begin_layout Plain Layout

PiepsStatus = 1; 	
\end_layout

\begin_layout Plain Layout

} 	
\end_layout

\begin_layout Plain Layout

else 	
\end_layout

\begin_layout Plain Layout

{ 
\end_layout

\begin_layout Plain Layout

PiepsStatus = 0; 	
\end_layout

\begin_layout Plain Layout

} 	
\end_layout

\begin_layout Plain Layout

if (frameReceive.data[1] > 0x2A) 	
\end_layout

\begin_layout Plain Layout

{  	
\end_layout

\begin_layout Plain Layout

LedVermelhoStatus = 1; 	
\end_layout

\begin_layout Plain Layout

} 	
\end_layout

\begin_layout Plain Layout

else 	
\end_layout

\begin_layout Plain Layout

{ 	
\end_layout

\begin_layout Plain Layout

LedVermelhoStatus = 0; 	
\end_layout

\begin_layout Plain Layout

} 	
\end_layout

\begin_layout Plain Layout

if (frameReceive.data[2] > 0xD5) 	
\end_layout

\begin_layout Plain Layout

{  	
\end_layout

\begin_layout Plain Layout

LedVerdeStatus = 1; 	
\end_layout

\begin_layout Plain Layout

} 	
\end_layout

\begin_layout Plain Layout

else 	
\end_layout

\begin_layout Plain Layout

{ 	
\end_layout

\begin_layout Plain Layout

LedVerdeStatus = 0; 	
\end_layout

\begin_layout Plain Layout

} 	
\end_layout

\begin_layout Plain Layout

if (frameReceive.data[3] == 0x01) 	
\end_layout

\begin_layout Plain Layout

{  	
\end_layout

\begin_layout Plain Layout

LedAzulStatus = 1; 	
\end_layout

\begin_layout Plain Layout

} 	
\end_layout

\begin_layout Plain Layout

else 	
\end_layout

\begin_layout Plain Layout

{ 	
\end_layout

\begin_layout Plain Layout

LedAzulStatus = 0; 	
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

/*sending CAN frames*/ 	
\end_layout

\begin_layout Plain Layout

frameSend.can_id  = 0x02; 	
\end_layout

\begin_layout Plain Layout

frameSend.can_dlc = 4; 	
\end_layout

\begin_layout Plain Layout

frameSend.data[0] = PiepsStatus; 	
\end_layout

\begin_layout Plain Layout

frameSend.data[1] = LedVermelhoStatus; 	
\end_layout

\begin_layout Plain Layout

frameSend.data[2] = LedVerdeStatus; 	
\end_layout

\begin_layout Plain Layout

frameSend.data[3] = LedAzulStatus;
\end_layout

\begin_layout Plain Layout

	nbytes = write(s, &frameSend, sizeof(struct can_frame));
\end_layout

\begin_layout Plain Layout

	printf("Wrote %d bytes
\backslash
n", nbytes); 	
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

} 
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
% Imprime uma página indicando o início dos apêndices 
\backslash
partapendices
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{apendicesenv}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
% Anexos 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

%
\backslash
begin{anexosenv} % Inicia os anexos 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
% Imprime uma página indicando o início dos anexos 
\backslash
partanexos
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

%
\backslash
end{anexosenv}
\end_layout

\end_inset


\end_layout

\end_body
\end_document
