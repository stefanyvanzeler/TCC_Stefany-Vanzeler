#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass abntex2
\begin_preamble
%\usepackage{tabela-simbolos}
\end_preamble
\options ruledheader, brazil
\use_default_options true
\maintain_unincluded_children false
\language brazilian
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\index Índice
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Chapter
INTRODUÇÃO
\begin_inset CommandInset label
LatexCommand label
name "chap:INTRODUÇÃO"

\end_inset


\end_layout

\begin_layout Standard
As redes industriais surgiram com a necessidade da integração dos equipamentos
 e dispositivos em todos os níveis de automação.
 Elas vêm sendo cada vez mais utilizadas devido ao desenvolvimento da informátic
a e a constante redução dos custos de componentes microcontrolados, o que
 possibilitou o desenvolvimento dos sistemas com comunicação serial em larga
 escala aplicados às redes de comunicação e ao desenvolvimento de vários
 protocolos de comunicação digital.
 Elas apresentam como grande vantagem à redução significativa de cabos de
 controle e seus acessórios que interligam os diversos dispositivos presentes
 em um sistema automatizado para transmitir informações, que podem ser de
 Input/Output (I/O), parâmetros e diagnósticos, proporcionando assim aumento
 da eficiência, qualidade e segurança no sistema produtivo, além de maior
 facilidade na instalação, manutenção e configuração dos equipamentos, fornecime
nto de diagnósticos rápidos e redução de custos.
 
\end_layout

\begin_layout Standard
O barramento Controller Area Network (CAN) é um sistema de barramento serial
 projetado para facilitar a comunicação entre dispositivos, como sensores
 e atuadores, que diretamente interagem com o processo.
 Ele foi desenvolvido pela empresa alemã Robert BOSCH e disponibilizado
 em meados dos anos 80 baseado na ISO 11898, voltado inicialmente para a
 indústria automobilística.
 Em decorrência das suas características, normalização e baixo custo de
 produção, tornou-se amplamente utilizado na indústria, 
\begin_inset CommandInset citation
LatexCommand cite
key "MC9S08DZ60"

\end_inset

.
 
\end_layout

\begin_layout Standard
\begin_inset Note Comment
status open

\begin_layout Plain Layout
O presente projeto tem como objetivo o desenvolvimento e implementação de
 um protótipo para barramento CAN, capaz de tratar adequadamente as mensagens
 do protocolo CAN, utilizando microcontroladores de baixo custo com a arquitetur
a ARM, e de se comunicar com um PC via protocolo TCP/IP, servindo como modelo
 para a futura integração de dispositivos de campo com uma rede DeviceNet
 no laboratório de automação industrial da EST.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
O presente projeto tem como objetivo o desenvolvimento de um sistema de
 monitoramento de barramento CAN, aonde possa-se observar o fluxo de dados
 entre as ECUs (unidades eletrônicas de controle) e se transmitir mensagens,
 por meio da implementação de um protótipo, que funcione como um 
\shape italic
gateway
\shape default
 entre os protocolos TCP/IP e CAN em um sistema 
\shape italic
Linux
\shape default
 embarcado com arquitetura ARM de baixo custo e um computador pessoal com
 sistema operacional Windows, utilizando-se as linguagens C/C++ e C# a partir
 do conceito de sockets, servindo como modelo para integração futura de
 dispositivos de campo com a rede 
\shape italic
DeviceNet
\shape default
 do laboratório de automacao industrial da EST (Escola Superior de Tecnologia).
\end_layout

\begin_layout Section
Formulação do problema
\end_layout

\begin_layout Standard
A inexistência de um dispositivo compatível com o barramento CAN, o qual
 permita simplificar a rede de comunicação do laboratório de automação industria
l da EST, que possui múltiplas interfaces e protocolos incompatíveis, e
 que sirva de base para a comunicação futura entre o CLP 
\shape italic
DeviceNet
\shape default
 com novos dispositivos.
\end_layout

\begin_layout Section
Justificativa
\end_layout

\begin_layout Standard
O desenvolvimento do sistema de monitoramento CAN e implantação do protótipo
 podem servir como base para novos projetos nas áreas de: redes indústrias,
 sistemas distribuídos, controle, automação, supervisão de processos e sistemas
 supervisórios.
 Além de poder ser utilizado em aulas práticas no laboratório de automação
 industrial da EST.
 
\end_layout

\begin_layout Standard
Academicamente, o presente trabalho contribui para a consolidação e aprofundamen
to nos conteúdos das disciplinas estudadas na EST de Redes Industriais de
 Comunicação, Redes de Computadores I e II, Microprocessadores e Microcontrolado
res, Sistemas Microprocessados, Interface entre Usuários e Sistemas Computaciona
is, Sistemas Supervisório e Automação e Supervisão de Processos.
 
\end_layout

\begin_layout Section
Motivação
\end_layout

\begin_layout Standard
A utilização da arquitetura CAN torna-se uma alternativa econômica de rede
 de dados para muitas aplicações industriais por prover um acondicionamento
 entre sensores e atuadores e toda a distribuição de controle em tempo real
 de dados através do barramento, além de possuir um sistema de gerenciamento
 de erros confiável.
 Aliado a esses fatos, é importante também existir uma interface entre a
 rede CAN e as outras redes, proporcionando o seu controle e monitoramento
 remoto, 
\begin_inset CommandInset citation
LatexCommand cite
key "Ethernet-CAN"

\end_inset

.
 A rede Ethernet TCP/IP tem sido amplamente também utilizada na indústria,
 por poder carregar grande quantidade de dados e ser adequada para o nível
 de gerenciamento na automação industrial, porém não sendo adequada para
 sistemas em tempo real.
 Assim surge-se a necessidade da implementação de uma 
\shape italic
gateway
\shape default
 entre esses dois protocolos no laboratório de automação industrial da EST
 e o desenvolvimento de um sistema de monitoramento de barramento CAN, 
\begin_inset CommandInset citation
LatexCommand cite
key "SargunaPriya"

\end_inset

, promovendo uma interface educativa e de controle da rede CAN.
\end_layout

\begin_layout Section
Objetivos
\end_layout

\begin_layout Standard
Desenvolver um sistema de monitoramento de barramento CAN e implementar
 um protótipo, que funcione como um 
\shape italic
gateway
\shape default
 entre os protocolos TCP/IP e CAN em um sistema 
\shape italic
Linux
\shape default
 embarcado com arquitetura ARM de baixo custo, servindo de interface entre
 o sistema de monitoramento em um computador pessoal com sistema operacional
 Windows e o barramento CAN.
 Este objetivo geral será alcançado quando todos seguintes objetivos específicos
 forem atingidos:
\end_layout

\begin_layout Itemize
Realizar revisão bibliográfica que confere embasamento teórico para realização
 do trabalho;
\end_layout

\begin_layout Itemize
Fazer um comparativo entre as arquiteturas Raspberry Pi B+ e Beaglebone
 Black e escolher uma dessas plataformas ARM para a implementacao do protótipo;
\end_layout

\begin_layout Itemize
Determinar o controlador CAN e receptor CAN;
\end_layout

\begin_layout Itemize
Implementar um 
\shape italic
gateway
\shape default
 entre os protocolos CAN e TCP/IP;
\end_layout

\begin_layout Itemize
Desenvolver um sistema de monitoramento para barramento CAN com interface
 TCP/IP;
\end_layout

\begin_layout Itemize
Montar uma rede CAN para testes;
\end_layout

\begin_layout Itemize
Testar o recebimento e envio de mensagens por meio do protótipo, monitorando
 em tempo real o barramento CAN da rede montada para testes com o sistema
 de monitoramento criado.
\end_layout

\begin_layout Section
Metodologia
\end_layout

\begin_layout Standard
Inicialmente foi realizada uma revisão bibliográfica conferindo embasamento
 teórico para realização do trabalho, em seguida o projeto foi dividido
 em 4 fases: definição, design, implementação e integração e validação,
 figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Metodologia"

\end_inset

.
\end_layout

\begin_layout Standard
Na primeira fase foram definidos os requisitos do sistema a partir dos objetivos
 e criado um modelo geral do sistema.
\end_layout

\begin_layout Standard
Na fase de design foi realizado um comparativo entre os minicomputadores
\shape italic
 Raspberry Pi +
\shape default
 e 
\shape italic
Beaglebone
\shape default
, adotando-se critérios para a escolha de uma dessas plataformas para a
 implementação do protótipo, a compra de materiais e montagem da arquitetura
 de hardware e especificação dos componentes.
 
\end_layout

\begin_layout Standard
Após o design foi feita a implementação de cada componente.
 Por último foi feita a integração desses componentes e validação do sistema
 desenvolvido, sendo confeccionado um manual do usuário, explicando o funcioname
nto do sistema de monitoramento CAN com o protótipo.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Metodologia
\begin_inset CommandInset label
LatexCommand label
name "fig:Metodologia"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename metodologia.jpg
	scale 70

\end_inset


\end_layout

\begin_layout Plain Layout
\align center
Fonte: Autora
\end_layout

\end_inset


\end_layout

\begin_layout Section
Organização do trabalho 
\end_layout

\begin_layout Standard
Este trabalho está dividido em cinco capítulos para seu melhor entendimento.
\end_layout

\begin_layout Standard
O Capítulo 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap:INTRODUÇÃO"

\end_inset

 contém uma breve introdução sobre o assunto a ser explanado no trabalho,
 sua motivação, justificativa para estudar as áreas mencionadas e um resumo
 da metodologia empregada no desenvolvimento do projeto.
\end_layout

\begin_layout Standard
O Capítulo 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap:REFERENCIAL-TEÓRICO"

\end_inset

contém um referencial teórico apresentando os tópicos relevantes por meio
 da visão de autores de obras consultadas e de trabalhos de pesquisa voltados
 para teorias e tecnologias aplicadas nesta monografia.
\end_layout

\begin_layout Standard
O Capítulo 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap:MATERIAIS-E-MÉTODOS"

\end_inset

 detalha os materiais e técnicas empregados no desenvolvimento do sistema
 de monitoramento CAN e a implementação do protótipo, citando os materiais
 utilizados.
 
\end_layout

\begin_layout Standard
O Capítulo 4 contém a análise dos resultados obtidos após execução da metodologi
a e o manual de usuário do sistema de monitoramento CAN.
\end_layout

\begin_layout Standard
O Capítulo 5 contém as conclusões que podem ser afirmadas após execução
 do projeto, fazendo análise de qualidade dos resultados obtidos e os confronta
 com os objetivos propostos pelo projeto.
\end_layout

\begin_layout Standard
Ao final do trabalho estão incluídos o Apêndice (A) e Apêndice (B) com código
 fonte de alguns módulos de software produzidos.
\end_layout

\end_body
\end_document
